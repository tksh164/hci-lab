{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "adminUserName": {
            "type": "string",
            "defaultValue": "AzureUser",
            "minLength": 1,
            "maxLength": 20,
            "metadata": {
                "description": "The administrator user name."
            }
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "The administrator password. The password must have 3 of the following: 1 lower case character, 1 upper case character, 1 number, and 1 special character. And the password must be between 12 and 123 characters long."
            }
        },
        "labHostVmName": {
            "type": "string",
            "defaultValue": "hcilab-vm1",
            "minLength": 1,
            "maxLength": 64,
            "metadata": {
                "description": "The name of the lab host virtual machine resource name. This value is not used for the virtual machine's computer name."
            }
        },
        "labHostVmSize": {
            "type": "string",
            "defaultValue": "Standard_E16s_v5",
            "allowedValues": [
                // Required VM size capabilities:
                // - Generation 2 VM support
                // - Premium storage support
                // - Accelerated networking support
                // - Nested virtualization support
                // - Non-AMD processor

                // Dsv5-series
                "Standard_D8s_v5",
                "Standard_D16s_v5",
                "Standard_D32s_v5",
                "Standard_D48s_v5",
                "Standard_D64s_v5",
                "Standard_D96s_v5",
                // Ddsv5-series
                "Standard_D8ds_v5",
                "Standard_D16ds_v5",
                "Standard_D32ds_v5",
                "Standard_D48ds_v5",
                "Standard_D64ds_v5",
                "Standard_D96ds_v5",
                // Dasv5-series
                // "Standard_D32as_v5",
                // "Standard_D48as_v5",
                // "Standard_D64as_v5",
                // "Standard_D96as_v5",
                // Dadsv5-series
                // "Standard_D32ads_v5",
                // "Standard_D48ads_v5",
                // "Standard_D64ads_v5",
                // "Standard_D96ads_v5",
                // Dlsv5-series
                "Standard_D16ls_v5",
                "Standard_D32ls_v5",
                "Standard_D48ls_v5",
                "Standard_D64ls_v5",
                "Standard_D96ls_v5",
                // Dldsv5-series
                "Standard_D16lds_v5",
                "Standard_D32lds_v5",
                "Standard_D48lds_v5",
                "Standard_D64lds_v5",
                "Standard_D96lds_v5",
                // Dsv4-series
                "Standard_D8s_v4",
                "Standard_D16s_v4",
                "Standard_D32s_v4",
                "Standard_D48s_v4",
                "Standard_D64s_v4",
                // Ddsv4-series
                "Standard_D8ds_v4",
                "Standard_D16ds_v4",
                "Standard_D32ds_v4",
                "Standard_D48ds_v4",
                "Standard_D64ds_v4",
                // Dsv3-series
                "Standard_D8s_v3",
                "Standard_D16s_v3",
                "Standard_D32s_v3",
                "Standard_D48s_v3",
                "Standard_D64s_v3",
                // Esv5-series
                "Standard_E4s_v5",
                "Standard_E8s_v5",
                "Standard_E16s_v5",
                "Standard_E20s_v5",
                "Standard_E32s_v5",
                "Standard_E48s_v5",
                "Standard_E64s_v5",
                "Standard_E96s_v5",
                // Edsv5-series
                "Standard_E4ds_v5",
                "Standard_E8ds_v5",
                "Standard_E16ds_v5",
                "Standard_E20ds_v5",
                "Standard_E32ds_v5",
                "Standard_E48ds_v5",
                "Standard_E64ds_v5",
                "Standard_E96ds_v5",
                // Easv5-series
                // "Standard_E16as_v5",
                // "Standard_E20as_v5",
                // "Standard_E32as_v5",
                // "Standard_E48as_v5",
                // "Standard_E64as_v5",
                // "Standard_E96as_v5",
                // Eadsv5-series
                // "Standard_E16ads_v5",
                // "Standard_E20ads_v5",
                // "Standard_E32ads_v5",
                // "Standard_E48ads_v5",
                // "Standard_E64ads_v5",
                // "Standard_E96ads_v5",
                // Ebsv5 series
                "Standard_E4bs_v5",
                "Standard_E8bs_v5",
                "Standard_E16bs_v5",
                "Standard_E32bs_v5",
                "Standard_E48bs_v5",
                "Standard_E64bs_v5",
                // Ebdsv5 series
                "Standard_E4bds_v5",
                "Standard_E8bds_v5",
                "Standard_E16bds_v5",
                "Standard_E32bds_v5",
                "Standard_E48bds_v5",
                "Standard_E64bds_v5",
                // Esv4-series
                "Standard_E4s_v4",
                "Standard_E8s_v4",
                "Standard_E16s_v4",
                "Standard_E20s_v4",
                "Standard_E32s_v4",
                "Standard_E48s_v4",
                "Standard_E64s_v4",
                // Edsv4-series
                "Standard_E4ds_v4",
                "Standard_E8ds_v4",
                "Standard_E16ds_v4",
                "Standard_E20ds_v4",
                "Standard_E32ds_v4",
                "Standard_E48ds_v4",
                "Standard_E64ds_v4",
                // Esv3-series
                "Standard_E4s_v3",
                "Standard_E8s_v3",
                "Standard_E16s_v3",
                "Standard_E20s_v3",
                "Standard_E32s_v3",
                "Standard_E48s_v3",
                "Standard_E64s_v3",
                // Fsv2-series
                "Standard_F16s_v2",
                "Standard_F32s_v2",
                "Standard_F48s_v2",
                "Standard_F64s_v2",
                "Standard_F72s_v2",
                // FX-series
                "Standard_FX4mds",
                "Standard_FX12mds",
                "Standard_FX24mds",
                "Standard_FX36mds",
                "Standard_FX48mds"
            ],
            "metadata": {
                "description": "The size of the lab host virtual machine."
            }
        },
        "labHostVmOsDiskType": {
            "type": "string",
            "defaultValue": "StandardSSD_LRS",
            "allowedValues": [
                "Premium_LRS",
                "StandardSSD_LRS",
                "Standard_LRS"
            ],
            "metadata": {
                "description": "The storage type of the lab host virtual machine's OS disk."
            }
        },
        "labHostVmDataDiskType": {
            "type": "string",
            "defaultValue": "StandardSSD_LRS",
            "allowedValues": [
                "Premium_LRS",
                "StandardSSD_LRS"
            ],
            "metadata": {
                "description": "The storage type of the lab host virtual machine's data disk."
            }
        },
        "labHostVmDataDiskSize": {
            "type": "int",
            "defaultValue": 64,
            "allowedValues": [
                32,
                64,
                128,
                256,
                512,
                1024
            ],
            "metadata": {
                "description": "The size of individual disk of the lab host virtual machine's data disks in GiB."
            }
        },
        "labHostVmDataDiskCount": {
            "type": "int",
            "defaultValue": 8,
            "minValue": 8,
            "maxValue": 32,
            "metadata": {
                "description": "The number of data disks on the lab host virtual machine."
            }
        },
        "hasEligibleWindowsServerLicense": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "By specifying True, you confirm you have an eligible Windows Server license with Software Assurance or Windows Server subscription to apply this Azure Hybrid Benefit. You can read more about compliance here: http://go.microsoft.com/fwlink/?LinkId=859786"
            }
        },
        "shouldDeployBastionDeveloper" : {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "By specifying True, will be deploy Azure Bastion Developer."
            }
        },
        "toolsToInstall": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "The tools to be installed on the lab host virtual machine. Use ';' to separate tool's symbol. Supported tool's symbols are windowsterminal, vscode."
            }
        },
        "shouldEnabledAutoshutdown": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "By specifying True, will be auto-shutdown configured to the lab host virtual machine."
            }
        },
        "autoshutdownTime": {
            "type": "string",
            "defaultValue": "22:00",
            "metadata": {
                "description": "The auto-shutdown time."
            }
        },
        "autoshutdownTimeZone": {
            "type": "string",
            "defaultValue": "UTC",
            "metadata": {
                "description": "The time zone for auto-shutdown time."
            }
        },
        "labVmOsCulture": {
            "type": "string",
            "defaultValue": "en-us",
            "allowedValues": [
                "en-us",
                "ja-jp"
            ],
            "metadata": {
                "description": "The operating system's culture of the lab virtual machines. This affects such as language and input method of the operating system."
            }
        },
        "labVmOsTimeZone": {
            "type": "string",
            "defaultValue": "UTC",
            "metadata": {
                "description": "The time zone of the lab virtual machines."
            }
        },
        "shouldInstallUpdatesToLabVm": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "By specifying True, operating system's updates will be installed during the deployment."
            }
        },
        "hciNodeOsSku": {
            "type": "string",
            "defaultValue": "azloc24h2_2506",
            "allowedValues": [
                "azloc24h2_2506",  // Azure Local 24H2 2506
                "azloc24h2_2505",  // Azure Local 24H2 2505
                "azloc24h2_2504",  // Azure Local 24H2 2504
                "ashci23h2",       // Azure Stack HCI 23H2 / Azure Local 23H2 2503
                "ashci22h2",       // Azure Stack HCI 22H2
                "ashci21h2",       // Azure Stack HCI 21H2
                "ashci20h2",       // Azure Stack HCI 20H2
                "ws2025",          // Windows Server 2025
                "ws2022"           // Windows Server 2022
            ],
            "metadata": {
                "description": "The operating system for the HCI node virtual machines."
            }
        },
        "hciNodeOsImageIndex": {
            "type": "int",
            "defaultValue": 1,
            "allowedValues": [
                1,  // For Azure Stack HCI
                //3,  // For Windows Server Datacenter Server Core
                4   // For Windows Server Datacenter with Desktop Experience
            ],
            "metadata": {
                "description": "The image index of the operating system for the HCI node virtual machines."
            }
        },
        "hciNodeCount": {
            "type": "int",
            "defaultValue": 2,
            "minValue": 2,
            "maxValue": 8,
            "metadata": {
                "description": "The number of HCI nodes to deploy."
            }
        },
        "shouldHciNodeJoinToAddsDomain": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "By specifying True, the HCI nodes join to the AD DS domain during the deployment."
            }
        },
        "addsDomainFqdn": {
            "type": "string",
            "defaultValue": "hci.internal",
            "metadata": {
                "description": "The Active Direcory Domain Services domain FQDN."
            }
        },
        "shouldCreateHciCluster": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "By specifying True, automatically create an HCI cluster during the deployment."
            }
        },
        "hciClusterName": {
            "type": "string",
            "defaultValue": "hciclus",
            "metadata": {
                "description": "The cluster name (cluster name object/CNO) for the HCI cluster."
            }
        },
        "isAzureLocalDeployment": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "By specifying True, it means the deployment is Azure Local."
            }
        },
        "shouldPrepareAddsForAzureLocal": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "By specifying True, the Azure Local AD objects will be created during the deployment."
            }
        },
        "addsOrgUnitPathForAzureLocal": {
            "type": "string",
            "defaultValue": "OU=AzureLocal,DC=hci,DC=internal",
            "metadata": {
                "description": "The Active Directory organizational Unit (OU) path to place the Azure Local related objects."
            }
        },
        "lcmUserName": {
            "type": "string",
            "defaultValue": "lcmuser",
            "metadata": {
                "description": "The user name of the Lifecycle Manager (LCM) deployment user account."
            }
        },
        "shouldInstallConfigAppForAzureLocal": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "By specifying True, the Configurator App for Azure Local will be installed during the deployment."
            }
        },
        "repoBaseUri": {
            "type": "string",
            "defaultValue": "https://raw.githubusercontent.com/tksh164/hci-lab/main/template/",
            "metadata": {
                "description": "The base URI of template's repository. The value must end with '/'."
            }
        },
        "salt": {
            "type": "string",
            "defaultValue": "[utcNow()]",
            "metadata": {
                "description": "The value for generate unique values."
            }
        }
    },
    "variables": {
        // General
        "location": "[resourceGroup().location]",
        "uniqueString": "[substring(uniqueString(resourceGroup().id, parameters('salt')), 0, 5)]",
        "repoBaseUri": "[if(endsWith(parameters('repoBaseUri'), '/'), parameters('repoBaseUri'), concat(parameters('repoBaseUri'), '/'))]",
        "deploymentApiVersion": "2025-04-01",

        // Virtual network
        "virtualNetwork": {
            "deploymentName": "deploy-vnet",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "linkedTemplateUri": "[uri(variables('repoBaseUri'), 'linkedtemplates/vnet.json')]",
            "name": "hcilab-vnet",
        },

        // Bastion
        "bastion": {
            "deploymentName": "deploy-bastion",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "linkedTemplateUri": "[uri(variables('repoBaseUri'), 'linkedtemplates/bastion.json')]",
            "name": "hcilab-bastion",
        },

        // Private DNS zones
        "privateDnsZoneLinkedTemplateUri": "[uri(variables('repoBaseUri'), 'linkedtemplates/private-dns-zone.json')]",
        "privateDnsZoneKeyVault": {
            "deploymentName": "deploy-private-dns-zone-key-vault",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "linkedTemplateUri": "[variables('privateDnsZoneLinkedTemplateUri')]",
            "zoneName": "privatelink.vaultcore.azure.net",
        },
        "privateDnsZoneStorageAccount": {
            "deploymentName": "deploy-private-dns-zone-storage-account",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "linkedTemplateUri": "[variables('privateDnsZoneLinkedTemplateUri')]",
            "zoneName": "privatelink.blob.core.windows.net",
        },

        // Private DNS zone virtual network link
        "privateDnsZoneVNetLinkLinkedTemplateUri": "[uri(variables('repoBaseUri'), 'linkedtemplates/private-dns-zone-vnet-link.json')]",
        "privateDnsZoneVNetLinkKeyVault": {
            "deploymentName": "deploy-private-dns-zone-vnet-link-key-vault",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "linkedTemplateUri": "[variables('privateDnsZoneVNetLinkLinkedTemplateUri')]"
        },
        "privateDnsZoneVNetLinkStorageAccount": {
            "deploymentName": "deploy-private-dns-zone-vnet-link-storage-account",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "linkedTemplateUri": "[variables('privateDnsZoneVNetLinkLinkedTemplateUri')]"
        },

        // Key Vault
        "keyVault": {
            "deploymentName": "deploy-key-vault",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "linkedTemplateUri": "[uri(variables('repoBaseUri'), 'linkedtemplates/keyvault.json')]",
            "name": "[format('hcilab{0}-kv', toLower(variables('uniqueString')))]",
        },

        // Lab host virtual machine
        "hostVm": {
            "deploymentName": "deploy-host-vm",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "linkedTemplateUri": "[uri(variables('repoBaseUri'), 'linkedtemplates/hostvm.json')]",
        },

        // Storage account for Cloud Witness
        "cloudWitnessStorageAccountDeploymentName": "deploy-storage-account-for-cloud-witness",
        "cloudWitnessStorageAccountLinkedTemplateUri": "[uri(variables('repoBaseUri'), 'linkedtemplates/cloudwitness.json')]",

        // Key Vault RBAC
        "keyVaultRbacDeploymentName": "assign-key-vault-rbac-with-lab-host-managed-id",
        "keyVaultRbacLinkedTemplateUri": "[uri(variables('repoBaseUri'), 'linkedtemplates/keyvault-rbac.json')]",

        // DSC extension
        "dscLinkedTemplateUri": "[uri(variables('repoBaseUri'), 'linkedtemplates/dsc.json')]",
        "dscBaseUri": "[uri(variables('repoBaseUri'), 'dsc/')]",  // Must end with "/".
        "dscExtensionName": "hci-lab-dsc-extension",
        "dscParams": {
            "installRolesFeatures": {
                "deploymentName": "install-roles-and-features-on-lab-host",
                "zipUri": "[uri(variables('dscBaseUri'), 'install-roles-and-features.zip')]",
                "scriptName": "install-roles-and-features.ps1",
                "functionName": "install-roles-and-features"
            },
            "rebootLabHost": {
                "deploymentName": "reboot-lab-host",
                "zipUri": "[uri(variables('dscBaseUri'), 'reboot.zip')]",
                "scriptName": "reboot.ps1",
                "functionName": "reboot"
            }
        },

        // Custom script extension
        "customScriptLinkedTemplateUri": "[uri(variables('repoBaseUri'), 'linkedtemplates/customscript.json')]",
        "customScriptBaseUri": "[uri(variables('repoBaseUri'), 'customscripts/')]",  // Must end with "/".
        "customScriptExtensionName": "hci-lab-customscript-extension",
        "customScriptParams": {
            "configureLabHost": {
                "deploymentName": "configure-lab-host",
                "fileUris": [
                    "[uri(variables('customScriptBaseUri'), 'configure-lab-host.ps1')]",
                    "[uri(variables('customScriptBaseUri'), 'common.psm1')]"
                ],
                "commandToExecute": "powershell.exe -ExecutionPolicy Unrestricted -File .\\configure-lab-host.ps1"
            },
            "downloadIsoUpdates": {
                "deploymentName": "download-materials",
                "fileUris": [
                    "[uri(variables('customScriptBaseUri'), 'download-iso-updates.ps1')]",
                    "[uri(variables('customScriptBaseUri'), 'download-iso-updates-asset-urls.psd1')]",
                    "[uri(variables('customScriptBaseUri'), 'common.psm1')]"
                ],
                "commandToExecute": "powershell.exe -ExecutionPolicy Unrestricted -File .\\download-iso-updates.ps1"
            },
            "createBaseVhd": {
                "deploymentName": "create-base-vhd",
                "fileUris": [
                    "[uri(variables('customScriptBaseUri'), 'create-base-vhd.ps1')]",
                    "[uri(variables('customScriptBaseUri'), 'create-base-vhd-job.ps1')]",
                    "[uri(variables('customScriptBaseUri'), 'common.psm1')]"
                ],
                "commandToExecute": "powershell.exe -ExecutionPolicy Unrestricted -File .\\create-base-vhd.ps1"
            },
            "createVm": {
                "deploymentName": "create-lab-vms",
                "fileUris": [
                    "[uri(variables('customScriptBaseUri'), 'create-vm.ps1')]",
                    "[uri(variables('customScriptBaseUri'), 'create-vm-job-addsdc.ps1')]",
                    "[uri(variables('customScriptBaseUri'), 'create-vm-job-wac.ps1')]",
                    "[uri(variables('customScriptBaseUri'), 'create-vm-job-hcinode.ps1')]",
                    "[uri(variables('customScriptBaseUri'), 'common.psm1')]"
                ],
                "commandToExecute": "powershell.exe -ExecutionPolicy Unrestricted -File .\\create-vm.ps1"
            },
            "createHciCluster": {
                "deploymentName": "create-hci-cluster",
                "fileUris": [
                    "[uri(variables('customScriptBaseUri'), 'create-hci-cluster.ps1')]",
                    "[uri(variables('customScriptBaseUri'), 'create-hci-cluster-test-cat-en-us.psd1')]",
                    "[uri(variables('customScriptBaseUri'), 'create-hci-cluster-test-cat-ja-jp.psd1')]",
                    "[uri(variables('customScriptBaseUri'), 'common.psm1')]"
                ],
                "commandToExecute": "powershell.exe -ExecutionPolicy Unrestricted -File .\\create-hci-cluster.ps1"
            }
        },

        // Configuration parameters
        "labConfig": {
            "labHost": {
                "storage": {
                    "poolName": "hcilabpool",
                    "driveLetter": "V",
                    "volumeLabel": "HCI Lab Data"
                },
                "folderPath": {
                    "log": "C:\\temp\\hcilab-logs",
                    "temp": "V:\\temp",
                    "updates": "V:\\temp\\updates",
                    "vhd": "V:\\vhd",
                    "vm": "V:\\vm"
                },
                "vSwitch": {
                    "nat": {
                        "name": "HciLabNAT"
                    }
                },
                "netNat": [
                    {
                        "name": "ManagementNAT",
                        "InternalAddressPrefix": "172.16.0.0/24",
                        "hostInternalIPAddress": "172.16.0.1",
                        "hostInternalPrefixLength": 24
                    },
                    {
                        "name": "ComputeNAT",
                        "InternalAddressPrefix": "10.0.0.0/16",
                        "hostInternalIPAddress": "10.0.0.1",
                        "hostInternalPrefixLength": 16
                    }
                ],
                "toolsToInstall": "[parameters('toolsToInstall')]"
            },
            "guestOS": {
                "culture": "[parameters('labVmOsCulture')]",
                "timeZone": "[parameters('labVmOsTimeZone')]",
                "shouldInstallUpdates": "[parameters('shouldInstallUpdatesToLabVm')]"
            },
            "addsDomain": {
                "fqdn": "[parameters('addsDomainFqdn')]"
            },
            "addsDC": {
                "vmName": "addsdc",
                "maximumRamBytes": 2147483648,
                "netAdapters": {
                    "management": {
                        "name": "Management",
                        "ipAddress": "172.16.0.2",
                        "prefixLength": 24,
                        "defaultGateway": "172.16.0.1",
                        "dnsServerAddresses": [ "168.63.129.16" ]
                    }
                },
                "shouldPrepareAddsForAzureLocal": "[parameters('shouldPrepareAddsForAzureLocal')]",
                "orgUnitForAzureLocal": "[parameters('addsOrgUnitPathForAzureLocal')]",
                "lcmUserName": "[parameters('lcmUserName')]"
            },
            "wac": {
                "vmName": "wac",
                "maximumRamBytes": 6442450944,
                "netAdapters": {
                    "management": {
                        "name": "Management",
                        "ipAddress": "172.16.0.3",
                        "prefixLength": 24,
                        "defaultGateway": "172.16.0.1",
                        "dnsServerAddresses": [ "172.16.0.2" ]
                    }
                },
                "shouldInstallConfigAppForAzureLocal": "[parameters('shouldInstallConfigAppForAzureLocal')]"
            },
            "hciNode": {
                "vmName": "hcinode{0:00}",  // vmNameOffset + ZeroBasedNodeIndex
                "vmNameOffset": 1,
                "operatingSystem": {
                    "sku": "[parameters('hciNodeOsSku')]",
                    "imageIndex": "[parameters('hciNodeOsImageIndex')]"
                },
                "nodeCount": "[parameters('hciNodeCount')]",
                "shouldJoinToAddsDomain": "[parameters('shouldHciNodeJoinToAddsDomain')]",
                "isAzureLocalDeployment": "[parameters('isAzureLocalDeployment')]",
                "dataDiskSizeBytes": 1099511627776,
                "ipAddressOffset": 11,
                "netAdapters": {
                    "management": {
                        "name": "Management",
                        "ipAddress": "172.16.0.{0}",  // ipAddressOffset + ZeroBasedNodeIndex
                        "prefixLength": 24,
                        "defaultGateway": "172.16.0.1",
                        "dnsServerAddresses": [ "172.16.0.2" ]
                    },
                    "compute": {
                        "name": "Compute",
                        "ipAddress": "10.0.0.{0}",  // ipAddressOffset + ZeroBasedNodeIndex
                        "prefixLength": 16
                    },
                    "storage1": {
                        "name": "Storage1",
                        "vlanId": 711,
                        "ipAddress": "172.20.1.{0}",  // ipAddressOffset + ZeroBasedNodeIndex
                        "prefixLength": 24
                    },
                    "storage2": {
                        "name": "Storage2",
                        "vlanId": 712,
                        "ipAddress": "172.20.2.{0}",  // ipAddressOffset + ZeroBasedNodeIndex
                        "prefixLength": 24
                    }
                }
            },
            "hciCluster": {
                "shouldCreateCluster": "[and(parameters('shouldHciNodeJoinToAddsDomain'), parameters('shouldCreateHciCluster'))]",
                "name": "[parameters('hciClusterName')]",
                "ipAddress": "172.16.0.200"
            },
            "keyVault": {
                "name": "[variables('keyVault').name]",
                "secretName": {
                    "adminPassword": "AdminPassword",
                    "cloudWitnessStorageAccountName": "CloudWitnessStorageAccountName",
                    "cloudWitnessStorageAccountKey": "CloudWitnessStorageAccountKey"
                }
            }
        }
    },
    "resources": [
        // Virtual network
        {
            "name": "[variables('virtualNetwork').deploymentName]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('virtualNetwork').apiVersion]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('virtualNetwork').linkedTemplateUri]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "virtualNetworkName": {
                        "value": "[variables('virtualNetwork').name]"
                    }
                }
            }
        },

        // Bastion
        {
            "name": "[variables('bastion').deploymentName]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('bastion').apiVersion]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('virtualNetwork').deploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('bastion').linkedTemplateUri]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "bastionName": {
                        "value": "[variables('bastion').name]"
                    },
                    "virtualNetworkId": {
                        "value": "[reference(variables('virtualNetwork').deploymentName, variables('virtualNetwork').apiVersion).outputs.virtualNetworkId.value]"
                    }
                }
            }
        },

        // Private DNS zone for Key Vault
        {
            "name": "[variables('privateDnsZoneKeyVault').deploymentName]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('privateDnsZoneKeyVault').apiVersion]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('privateDnsZoneKeyVault').linkedTemplateUri]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "privateDnsZoneName": {
                        "value": "[variables('privateDnsZoneKeyVault').zoneName]"
                    }
                }
            }
        },

        // Private DNS zone virtual network link for Key Vault
        {
            "name": "[variables('privateDnsZoneVNetLinkKeyVault').deploymentName]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('privateDnsZoneVNetLinkKeyVault').apiVersion]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('virtualNetwork').deploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('privateDnsZoneKeyVault').deploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('privateDnsZoneVNetLinkKeyVault').linkedTemplateUri]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "privateDnsZoneName": {
                        "value": "[variables('privateDnsZoneKeyVault').zoneName]"
                    },
                    "virtualNetworkId": {
                        "value": "[reference(variables('virtualNetwork').deploymentName, variables('virtualNetwork').apiVersion).outputs.virtualNetworkId.value]"
                    }
                }
            }
        },

        // Private DNS zone for Storage account
        {
            "name": "[variables('privateDnsZoneStorageAccount').deploymentName]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('privateDnsZoneStorageAccount').apiVersion]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('privateDnsZoneStorageAccount').linkedTemplateUri]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "privateDnsZoneName": {
                        "value": "[variables('privateDnsZoneStorageAccount').zoneName]"
                    }
                }
            }
        },

        // Private DNS zone virtual network link for Storage account
        {
            "name": "[variables('privateDnsZoneVNetLinkStorageAccount').deploymentName]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('privateDnsZoneVNetLinkStorageAccount').apiVersion]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('virtualNetwork').deploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('privateDnsZoneStorageAccount').deploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('privateDnsZoneVNetLinkStorageAccount').linkedTemplateUri]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "privateDnsZoneName": {
                        "value": "[variables('privateDnsZoneStorageAccount').zoneName]"
                    },
                    "virtualNetworkId": {
                        "value": "[reference(variables('virtualNetwork').deploymentName, variables('virtualNetwork').apiVersion).outputs.virtualNetworkId.value]"
                    }
                }
            }
        },

        // Key Vault
        {
            "name": "[variables('keyVault').deploymentName]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('keyVault').apiVersion]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('keyVault').linkedTemplateUri]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "keyVaultName": {
                        "value": "[variables('keyVault').name]"
                    },
                    "secretNameForLabHostAdminPassword": {
                        "value": "[variables('labConfig').keyVault.secretName.adminPassword]"
                    },
                    "labHostAdminPassword": {
                        "value": "[parameters('adminPassword')]"
                    }
                }
            }
        },

        // Lab host virtual machine.
        {
            "name": "[variables('hostVm').deploymentName]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('hostVm').apiVersion]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('virtualNetwork').deploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('hostVm').linkedTemplateUri]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "subnetId": {
                        "value": "[reference(variables('virtualNetwork').deploymentName, variables('virtualNetwork').apiVersion).outputs.subnetId.value.default]"
                    },
                    "vmName": {
                        "value": "[parameters('labHostVmName')]"
                    },
                    "adminUserName": {
                        "value": "[parameters('adminUserName')]"
                    },
                    "adminPassword": {
                        "value": "[parameters('adminPassword')]"
                    },
                    "vmSize": {
                        "value": "[parameters('labHostVmSize')]"
                    },
                    "osDiskType": {
                        "value": "[parameters('labHostVmOsDiskType')]"
                    },
                    "dataDiskType": {
                        "value": "[parameters('labHostVmDataDiskType')]"
                    },
                    "dataDiskSize": {
                        "value": "[parameters('labHostVmDataDiskSize')]"
                    },
                    "dataDiskCount": {
                        "value": "[parameters('labHostVmDataDiskCount')]"
                    },
                    "hasEligibleWindowsServerLicense": {
                        "value": "[parameters('hasEligibleWindowsServerLicense')]"
                    },
                    "base64EncodedLabConfig": {
                        "value": "[base64(string(variables('labConfig')))]"
                    },
                    "shouldEnabledAutoshutdown": {
                        "value": "[parameters('shouldEnabledAutoshutdown')]"
                    },
                    "autoshutdownTime": {
                        "value": "[parameters('autoshutdownTime')]"
                    },
                    "autoshutdownTimeZone": {
                        "value": "[parameters('autoshutdownTimeZone')]"
                    },
                    "uniqueString": {
                        "value": "[variables('uniqueString')]"
                    }
                }
            }
        },

        // Bastion
        {
            "name": "[variables('bastionDeploymentName')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('deploymentApiVersion')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('virtualNetworkDeploymentName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('bastionLinkedTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "bastionName": {
                        "value": "[variables('bastionName')]"
                    },
                    "virtualNetworkId": {
                        "value": "[reference(variables('virtualNetworkDeploymentName'), variables('deploymentApiVersion')).outputs.virtualNetworkId.value]"
                    }
                }
            }
        },

        // Key Vault RBAC
        {
            "name": "[variables('keyVaultRbacDeploymentName')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2022-09-01",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('keyVaultDeploymentName'))]",
                "[resourceId('Microsoft.Resources/deployments', variables('labHostVmDeploymentName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('keyVaultRbacLinkedTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "keyVaultName": {
                        "value": "[variables('keyVaultName')]"
                    },
                    "servicePrincipalId": {
                        "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('labHostVmDeploymentName'))).outputs.principalId.value]"
                    },
                    "roleDefinitionId": {
                        "value": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]"  // Key Vault Secrets User
                    }
                }
            }
        },

        // Install roles and features.
        {
            "name": "[variables('dscParams').installRolesFeatures.deploymentName]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2022-09-01",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('labHostVmDeploymentName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('dscLinkedTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "parentVmResourceName": {
                        "value": "[parameters('labHostVmName')]"
                    },
                    "extensionName": {
                        "value": "[variables('dscExtensionName')]"
                    },
                    "zipUri": {
                        "value": "[variables('dscParams').installRolesFeatures.zipUri]"
                    },
                    "scriptName": {
                        "value": "[variables('dscParams').installRolesFeatures.scriptName]"
                    },
                    "functionName": {
                        "value": "[variables('dscParams').installRolesFeatures.functionName]"
                    }
                }
            }
        },

        // Configure the lab host.
        {
            "name": "[variables('customScriptParams').configureLabHost.deploymentName]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2022-09-01",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('keyVaultRbacDeploymentName'))]",
                "[resourceId('Microsoft.Resources/deployments', variables('dscParams').installRolesFeatures.deploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('customScriptLinkedTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "parentVmResourceName": {
                        "value": "[parameters('labHostVmName')]"
                    },
                    "extensionName": {
                        "value": "[variables('customScriptExtensionName')]"
                    },
                    "fileUris": {
                        "value": "[variables('customScriptParams').configureLabHost.fileUris]"
                    },
                    "commandToExecute": {
                        "value": "[variables('customScriptParams').configureLabHost.commandToExecute]"
                    }
                }
            }
        },

        // Download ISO files and updates.
        {
            "name": "[variables('customScriptParams').downloadIsoUpdates.deploymentName]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2022-09-01",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('customScriptParams').configureLabHost.deploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('customScriptLinkedTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "parentVmResourceName": {
                        "value": "[parameters('labHostVmName')]"
                    },
                    "extensionName": {
                        "value": "[variables('customScriptExtensionName')]"
                    },
                    "fileUris": {
                        "value": "[variables('customScriptParams').downloadIsoUpdates.fileUris]"
                    },
                    "commandToExecute": {
                        "value": "[variables('customScriptParams').downloadIsoUpdates.commandToExecute]"
                    }
                }
            }
        },

        // Create base virtual hard disks.
        {
            "name": "[variables('customScriptParams').createBaseVhd.deploymentName]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2022-09-01",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('customScriptParams').downloadIsoUpdates.deploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('customScriptLinkedTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "parentVmResourceName": {
                        "value": "[parameters('labHostVmName')]"
                    },
                    "extensionName": {
                        "value": "[variables('customScriptExtensionName')]"
                    },
                    "fileUris": {
                        "value": "[variables('customScriptParams').createBaseVhd.fileUris]"
                    },
                    "commandToExecute": {
                        "value": "[variables('customScriptParams').createBaseVhd.commandToExecute]"
                    }
                }
            }
        },

        // Reboot the lab host.
        {
            "name": "[variables('dscParams').rebootLabHost.deploymentName]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2022-09-01",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('customScriptParams').createBaseVhd.deploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('dscLinkedTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "parentVmResourceName": {
                        "value": "[parameters('labHostVmName')]"
                    },
                    "extensionName": {
                        "value": "[variables('dscExtensionName')]"
                    },
                    "zipUri": {
                        "value": "[variables('dscParams').rebootLabHost.zipUri]"
                    },
                    "scriptName": {
                        "value": "[variables('dscParams').rebootLabHost.scriptName]"
                    },
                    "functionName": {
                        "value": "[variables('dscParams').rebootLabHost.functionName]"
                    }
                }
            }
        },

        // Create VMs.
        {
            "name": "[variables('customScriptParams').createVm.deploymentName]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2022-09-01",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('dscParams').rebootLabHost.deploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('customScriptLinkedTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "parentVmResourceName": {
                        "value": "[parameters('labHostVmName')]"
                    },
                    "extensionName": {
                        "value": "[variables('customScriptExtensionName')]"
                    },
                    "fileUris": {
                        "value": "[variables('customScriptParams').createVm.fileUris]"
                    },
                    "commandToExecute": {
                        "value": "[variables('customScriptParams').createVm.commandToExecute]"
                    }
                }
            }
        },

        // Create an HCI cluster.
        {
            "condition": "[variables('labConfig').hciCluster.shouldCreateCluster]",
            "name": "[variables('customScriptParams').createHciCluster.deploymentName]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2022-09-01",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('cloudWitnessStorageAccountDeploymentName'))]",
                "[resourceId('Microsoft.Resources/deployments', variables('customScriptParams').createVm.deploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('customScriptLinkedTemplateUri')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "parentVmResourceName": {
                        "value": "[parameters('labHostVmName')]"
                    },
                    "extensionName": {
                        "value": "[variables('customScriptExtensionName')]"
                    },
                    "fileUris": {
                        "value": "[variables('customScriptParams').createHciCluster.fileUris]"
                    },
                    "commandToExecute": {
                        "value": "[variables('customScriptParams').createHciCluster.commandToExecute]"
                    }
                }
            }
        }
    ],
    "outputs": {
        "adminUserName": {
            "type": "string",
            "value": "[parameters('adminUserName')]"
        },
        "vmPublicIpFqdn": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.Resources/deployments', variables('hostVm').deploymentName)).outputs.fqdn.value]"
        }
    }
}
